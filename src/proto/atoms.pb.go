// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: atoms.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Chat_AccountStatus int32

const (
	Chat_Standard Chat_AccountStatus = 0
	Chat_Premium  Chat_AccountStatus = 1
)

// Enum value maps for Chat_AccountStatus.
var (
	Chat_AccountStatus_name = map[int32]string{
		0: "Standard",
		1: "Premium",
	}
	Chat_AccountStatus_value = map[string]int32{
		"Standard": 0,
		"Premium":  1,
	}
)

func (x Chat_AccountStatus) Enum() *Chat_AccountStatus {
	p := new(Chat_AccountStatus)
	*p = x
	return p
}

func (x Chat_AccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chat_AccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[0].Descriptor()
}

func (Chat_AccountStatus) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[0]
}

func (x Chat_AccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chat_AccountStatus.Descriptor instead.
func (Chat_AccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0}
}

type Chat_Modifier_Pos int32

const (
	Chat_Modifier_naka  Chat_Modifier_Pos = 0
	Chat_Modifier_shita Chat_Modifier_Pos = 1
	Chat_Modifier_ue    Chat_Modifier_Pos = 2
)

// Enum value maps for Chat_Modifier_Pos.
var (
	Chat_Modifier_Pos_name = map[int32]string{
		0: "naka",
		1: "shita",
		2: "ue",
	}
	Chat_Modifier_Pos_value = map[string]int32{
		"naka":  0,
		"shita": 1,
		"ue":    2,
	}
)

func (x Chat_Modifier_Pos) Enum() *Chat_Modifier_Pos {
	p := new(Chat_Modifier_Pos)
	*p = x
	return p
}

func (x Chat_Modifier_Pos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chat_Modifier_Pos) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[1].Descriptor()
}

func (Chat_Modifier_Pos) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[1]
}

func (x Chat_Modifier_Pos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chat_Modifier_Pos.Descriptor instead.
func (Chat_Modifier_Pos) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Chat_Modifier_Size int32

const (
	Chat_Modifier_medium Chat_Modifier_Size = 0
	Chat_Modifier_small  Chat_Modifier_Size = 1
	Chat_Modifier_big    Chat_Modifier_Size = 2
)

// Enum value maps for Chat_Modifier_Size.
var (
	Chat_Modifier_Size_name = map[int32]string{
		0: "medium",
		1: "small",
		2: "big",
	}
	Chat_Modifier_Size_value = map[string]int32{
		"medium": 0,
		"small":  1,
		"big":    2,
	}
)

func (x Chat_Modifier_Size) Enum() *Chat_Modifier_Size {
	p := new(Chat_Modifier_Size)
	*p = x
	return p
}

func (x Chat_Modifier_Size) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chat_Modifier_Size) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[2].Descriptor()
}

func (Chat_Modifier_Size) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[2]
}

func (x Chat_Modifier_Size) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chat_Modifier_Size.Descriptor instead.
func (Chat_Modifier_Size) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0, 1}
}

type Chat_Modifier_ColorName int32

const (
	Chat_Modifier_white   Chat_Modifier_ColorName = 0
	Chat_Modifier_red     Chat_Modifier_ColorName = 1
	Chat_Modifier_pink    Chat_Modifier_ColorName = 2
	Chat_Modifier_orange  Chat_Modifier_ColorName = 3
	Chat_Modifier_yellow  Chat_Modifier_ColorName = 4
	Chat_Modifier_green   Chat_Modifier_ColorName = 5
	Chat_Modifier_cyan    Chat_Modifier_ColorName = 6
	Chat_Modifier_blue    Chat_Modifier_ColorName = 7
	Chat_Modifier_purple  Chat_Modifier_ColorName = 8
	Chat_Modifier_black   Chat_Modifier_ColorName = 9
	Chat_Modifier_white2  Chat_Modifier_ColorName = 10
	Chat_Modifier_red2    Chat_Modifier_ColorName = 11
	Chat_Modifier_pink2   Chat_Modifier_ColorName = 12
	Chat_Modifier_orange2 Chat_Modifier_ColorName = 13
	Chat_Modifier_yellow2 Chat_Modifier_ColorName = 14
	Chat_Modifier_green2  Chat_Modifier_ColorName = 15
	Chat_Modifier_cyan2   Chat_Modifier_ColorName = 16
	Chat_Modifier_blue2   Chat_Modifier_ColorName = 17
	Chat_Modifier_purple2 Chat_Modifier_ColorName = 18
	Chat_Modifier_black2  Chat_Modifier_ColorName = 19
)

// Enum value maps for Chat_Modifier_ColorName.
var (
	Chat_Modifier_ColorName_name = map[int32]string{
		0:  "white",
		1:  "red",
		2:  "pink",
		3:  "orange",
		4:  "yellow",
		5:  "green",
		6:  "cyan",
		7:  "blue",
		8:  "purple",
		9:  "black",
		10: "white2",
		11: "red2",
		12: "pink2",
		13: "orange2",
		14: "yellow2",
		15: "green2",
		16: "cyan2",
		17: "blue2",
		18: "purple2",
		19: "black2",
	}
	Chat_Modifier_ColorName_value = map[string]int32{
		"white":   0,
		"red":     1,
		"pink":    2,
		"orange":  3,
		"yellow":  4,
		"green":   5,
		"cyan":    6,
		"blue":    7,
		"purple":  8,
		"black":   9,
		"white2":  10,
		"red2":    11,
		"pink2":   12,
		"orange2": 13,
		"yellow2": 14,
		"green2":  15,
		"cyan2":   16,
		"blue2":   17,
		"purple2": 18,
		"black2":  19,
	}
)

func (x Chat_Modifier_ColorName) Enum() *Chat_Modifier_ColorName {
	p := new(Chat_Modifier_ColorName)
	*p = x
	return p
}

func (x Chat_Modifier_ColorName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chat_Modifier_ColorName) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[3].Descriptor()
}

func (Chat_Modifier_ColorName) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[3]
}

func (x Chat_Modifier_ColorName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chat_Modifier_ColorName.Descriptor instead.
func (Chat_Modifier_ColorName) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0, 2}
}

type Chat_Modifier_Font int32

const (
	Chat_Modifier_defont Chat_Modifier_Font = 0
	Chat_Modifier_mincho Chat_Modifier_Font = 1
	Chat_Modifier_gothic Chat_Modifier_Font = 2
)

// Enum value maps for Chat_Modifier_Font.
var (
	Chat_Modifier_Font_name = map[int32]string{
		0: "defont",
		1: "mincho",
		2: "gothic",
	}
	Chat_Modifier_Font_value = map[string]int32{
		"defont": 0,
		"mincho": 1,
		"gothic": 2,
	}
)

func (x Chat_Modifier_Font) Enum() *Chat_Modifier_Font {
	p := new(Chat_Modifier_Font)
	*p = x
	return p
}

func (x Chat_Modifier_Font) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chat_Modifier_Font) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[4].Descriptor()
}

func (Chat_Modifier_Font) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[4]
}

func (x Chat_Modifier_Font) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chat_Modifier_Font.Descriptor instead.
func (Chat_Modifier_Font) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0, 3}
}

type Chat_Modifier_Opacity int32

const (
	Chat_Modifier_Normal      Chat_Modifier_Opacity = 0
	Chat_Modifier_Translucent Chat_Modifier_Opacity = 1
)

// Enum value maps for Chat_Modifier_Opacity.
var (
	Chat_Modifier_Opacity_name = map[int32]string{
		0: "Normal",
		1: "Translucent",
	}
	Chat_Modifier_Opacity_value = map[string]int32{
		"Normal":      0,
		"Translucent": 1,
	}
)

func (x Chat_Modifier_Opacity) Enum() *Chat_Modifier_Opacity {
	p := new(Chat_Modifier_Opacity)
	*p = x
	return p
}

func (x Chat_Modifier_Opacity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chat_Modifier_Opacity) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[5].Descriptor()
}

func (Chat_Modifier_Opacity) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[5]
}

func (x Chat_Modifier_Opacity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chat_Modifier_Opacity.Descriptor instead.
func (Chat_Modifier_Opacity) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0, 4}
}

type CommentLock_Status int32

const (
	CommentLock_Unrestricted CommentLock_Status = 0
	CommentLock_Locked       CommentLock_Status = 1
)

// Enum value maps for CommentLock_Status.
var (
	CommentLock_Status_name = map[int32]string{
		0: "Unrestricted",
		1: "Locked",
	}
	CommentLock_Status_value = map[string]int32{
		"Unrestricted": 0,
		"Locked":       1,
	}
)

func (x CommentLock_Status) Enum() *CommentLock_Status {
	p := new(CommentLock_Status)
	*p = x
	return p
}

func (x CommentLock_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentLock_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[6].Descriptor()
}

func (CommentLock_Status) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[6]
}

func (x CommentLock_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentLock_Status.Descriptor instead.
func (CommentLock_Status) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{7, 0}
}

type CommentMode_Layout int32

const (
	CommentMode_Normal     CommentMode_Layout = 0
	CommentMode_SplitTop   CommentMode_Layout = 1
	CommentMode_Background CommentMode_Layout = 2
)

// Enum value maps for CommentMode_Layout.
var (
	CommentMode_Layout_name = map[int32]string{
		0: "Normal",
		1: "SplitTop",
		2: "Background",
	}
	CommentMode_Layout_value = map[string]int32{
		"Normal":     0,
		"SplitTop":   1,
		"Background": 2,
	}
)

func (x CommentMode_Layout) Enum() *CommentMode_Layout {
	p := new(CommentMode_Layout)
	*p = x
	return p
}

func (x CommentMode_Layout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentMode_Layout) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[7].Descriptor()
}

func (CommentMode_Layout) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[7]
}

func (x CommentMode_Layout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentMode_Layout.Descriptor instead.
func (CommentMode_Layout) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{8, 0}
}

type TrialPanel_Panel int32

const (
	TrialPanel_Hidden  TrialPanel_Panel = 0
	TrialPanel_Display TrialPanel_Panel = 1
)

// Enum value maps for TrialPanel_Panel.
var (
	TrialPanel_Panel_name = map[int32]string{
		0: "Hidden",
		1: "Display",
	}
	TrialPanel_Panel_value = map[string]int32{
		"Hidden":  0,
		"Display": 1,
	}
)

func (x TrialPanel_Panel) Enum() *TrialPanel_Panel {
	p := new(TrialPanel_Panel)
	*p = x
	return p
}

func (x TrialPanel_Panel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialPanel_Panel) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[8].Descriptor()
}

func (TrialPanel_Panel) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[8]
}

func (x TrialPanel_Panel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialPanel_Panel.Descriptor instead.
func (TrialPanel_Panel) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{10, 0}
}

type TrialPanel_Mode int32

const (
	TrialPanel_Allowed    TrialPanel_Mode = 0
	TrialPanel_Restricted TrialPanel_Mode = 1
	TrialPanel_Forbidden  TrialPanel_Mode = 2
)

// Enum value maps for TrialPanel_Mode.
var (
	TrialPanel_Mode_name = map[int32]string{
		0: "Allowed",
		1: "Restricted",
		2: "Forbidden",
	}
	TrialPanel_Mode_value = map[string]int32{
		"Allowed":    0,
		"Restricted": 1,
		"Forbidden":  2,
	}
)

func (x TrialPanel_Mode) Enum() *TrialPanel_Mode {
	p := new(TrialPanel_Mode)
	*p = x
	return p
}

func (x TrialPanel_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialPanel_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[9].Descriptor()
}

func (TrialPanel_Mode) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[9]
}

func (x TrialPanel_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialPanel_Mode.Descriptor instead.
func (TrialPanel_Mode) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{10, 1}
}

type ProgramStatus_State int32

const (
	ProgramStatus_Unknown ProgramStatus_State = 0
	ProgramStatus_Ended   ProgramStatus_State = 1
)

// Enum value maps for ProgramStatus_State.
var (
	ProgramStatus_State_name = map[int32]string{
		0: "Unknown",
		1: "Ended",
	}
	ProgramStatus_State_value = map[string]int32{
		"Unknown": 0,
		"Ended":   1,
	}
)

func (x ProgramStatus_State) Enum() *ProgramStatus_State {
	p := new(ProgramStatus_State)
	*p = x
	return p
}

func (x ProgramStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgramStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[10].Descriptor()
}

func (ProgramStatus_State) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[10]
}

func (x ProgramStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgramStatus_State.Descriptor instead.
func (ProgramStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{11, 0}
}

type Enquete_Status int32

const (
	Enquete_Closed Enquete_Status = 0
	Enquete_Poll   Enquete_Status = 1
	Enquete_Result Enquete_Status = 2
)

// Enum value maps for Enquete_Status.
var (
	Enquete_Status_name = map[int32]string{
		0: "Closed",
		1: "Poll",
		2: "Result",
	}
	Enquete_Status_value = map[string]int32{
		"Closed": 0,
		"Poll":   1,
		"Result": 2,
	}
)

func (x Enquete_Status) Enum() *Enquete_Status {
	p := new(Enquete_Status)
	*p = x
	return p
}

func (x Enquete_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enquete_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_atoms_proto_enumTypes[11].Descriptor()
}

func (Enquete_Status) Type() protoreflect.EnumType {
	return &file_atoms_proto_enumTypes[11]
}

func (x Enquete_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enquete_Status.Descriptor instead.
func (Enquete_Status) EnumDescriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{15, 0}
}

type Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content       string             `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Vpos          int32              `protobuf:"varint,3,opt,name=vpos,proto3" json:"vpos,omitempty"`
	AccountStatus Chat_AccountStatus `protobuf:"varint,4,opt,name=account_status,json=accountStatus,proto3,enum=dwango.nicolive.chat.data.Chat_AccountStatus" json:"account_status,omitempty"`
	Name          *string            `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	RawUserId     *int64             `protobuf:"varint,5,opt,name=raw_user_id,json=rawUserId,proto3,oneof" json:"raw_user_id,omitempty"`
	HashedUserId  *string            `protobuf:"bytes,6,opt,name=hashed_user_id,json=hashedUserId,proto3,oneof" json:"hashed_user_id,omitempty"`
	Modifier      *Chat_Modifier     `protobuf:"bytes,7,opt,name=modifier,proto3" json:"modifier,omitempty"`
	No            int32              `protobuf:"varint,8,opt,name=no,proto3" json:"no,omitempty"`
}

func (x *Chat) Reset() {
	*x = Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0}
}

func (x *Chat) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Chat) GetVpos() int32 {
	if x != nil {
		return x.Vpos
	}
	return 0
}

func (x *Chat) GetAccountStatus() Chat_AccountStatus {
	if x != nil {
		return x.AccountStatus
	}
	return Chat_Standard
}

func (x *Chat) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Chat) GetRawUserId() int64 {
	if x != nil && x.RawUserId != nil {
		return *x.RawUserId
	}
	return 0
}

func (x *Chat) GetHashedUserId() string {
	if x != nil && x.HashedUserId != nil {
		return *x.HashedUserId
	}
	return ""
}

func (x *Chat) GetModifier() *Chat_Modifier {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *Chat) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

type OperatorComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  string         `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Name     *string        `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Modifier *Chat_Modifier `protobuf:"bytes,3,opt,name=modifier,proto3" json:"modifier,omitempty"`
	Link     *string        `protobuf:"bytes,4,opt,name=link,proto3,oneof" json:"link,omitempty"`
}

func (x *OperatorComment) Reset() {
	*x = OperatorComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorComment) ProtoMessage() {}

func (x *OperatorComment) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorComment.ProtoReflect.Descriptor instead.
func (*OperatorComment) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{1}
}

func (x *OperatorComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OperatorComment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OperatorComment) GetModifier() *Chat_Modifier {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *OperatorComment) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

type Jump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string               `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Wait    *durationpb.Duration `protobuf:"bytes,4,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *Jump) Reset() {
	*x = Jump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jump) ProtoMessage() {}

func (x *Jump) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jump.ProtoReflect.Descriptor instead.
func (*Jump) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{2}
}

func (x *Jump) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Jump) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Jump) GetWait() *durationpb.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

type Redirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri     string               `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Wait    *durationpb.Duration `protobuf:"bytes,4,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *Redirect) Reset() {
	*x = Redirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redirect) ProtoMessage() {}

func (x *Redirect) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redirect.ProtoReflect.Descriptor instead.
func (*Redirect) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{3}
}

func (x *Redirect) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Redirect) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Redirect) GetWait() *durationpb.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

type SimpleNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*SimpleNotification_Ichiba
	//	*SimpleNotification_Quote
	//	*SimpleNotification_Emotion
	//	*SimpleNotification_Cruise
	//	*SimpleNotification_ProgramExtended
	//	*SimpleNotification_RankingIn
	//	*SimpleNotification_RankingUpdated
	//	*SimpleNotification_Visited
	Message isSimpleNotification_Message `protobuf_oneof:"message"`
}

func (x *SimpleNotification) Reset() {
	*x = SimpleNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleNotification) ProtoMessage() {}

func (x *SimpleNotification) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleNotification.ProtoReflect.Descriptor instead.
func (*SimpleNotification) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{4}
}

func (m *SimpleNotification) GetMessage() isSimpleNotification_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SimpleNotification) GetIchiba() string {
	if x, ok := x.GetMessage().(*SimpleNotification_Ichiba); ok {
		return x.Ichiba
	}
	return ""
}

func (x *SimpleNotification) GetQuote() string {
	if x, ok := x.GetMessage().(*SimpleNotification_Quote); ok {
		return x.Quote
	}
	return ""
}

func (x *SimpleNotification) GetEmotion() string {
	if x, ok := x.GetMessage().(*SimpleNotification_Emotion); ok {
		return x.Emotion
	}
	return ""
}

func (x *SimpleNotification) GetCruise() string {
	if x, ok := x.GetMessage().(*SimpleNotification_Cruise); ok {
		return x.Cruise
	}
	return ""
}

func (x *SimpleNotification) GetProgramExtended() string {
	if x, ok := x.GetMessage().(*SimpleNotification_ProgramExtended); ok {
		return x.ProgramExtended
	}
	return ""
}

func (x *SimpleNotification) GetRankingIn() string {
	if x, ok := x.GetMessage().(*SimpleNotification_RankingIn); ok {
		return x.RankingIn
	}
	return ""
}

func (x *SimpleNotification) GetRankingUpdated() string {
	if x, ok := x.GetMessage().(*SimpleNotification_RankingUpdated); ok {
		return x.RankingUpdated
	}
	return ""
}

func (x *SimpleNotification) GetVisited() string {
	if x, ok := x.GetMessage().(*SimpleNotification_Visited); ok {
		return x.Visited
	}
	return ""
}

type isSimpleNotification_Message interface {
	isSimpleNotification_Message()
}

type SimpleNotification_Ichiba struct {
	Ichiba string `protobuf:"bytes,1,opt,name=ichiba,proto3,oneof"`
}

type SimpleNotification_Quote struct {
	Quote string `protobuf:"bytes,2,opt,name=quote,proto3,oneof"`
}

type SimpleNotification_Emotion struct {
	Emotion string `protobuf:"bytes,3,opt,name=emotion,proto3,oneof"`
}

type SimpleNotification_Cruise struct {
	Cruise string `protobuf:"bytes,4,opt,name=cruise,proto3,oneof"`
}

type SimpleNotification_ProgramExtended struct {
	ProgramExtended string `protobuf:"bytes,5,opt,name=program_extended,json=programExtended,proto3,oneof"`
}

type SimpleNotification_RankingIn struct {
	RankingIn string `protobuf:"bytes,6,opt,name=ranking_in,json=rankingIn,proto3,oneof"`
}

type SimpleNotification_RankingUpdated struct {
	RankingUpdated string `protobuf:"bytes,8,opt,name=ranking_updated,json=rankingUpdated,proto3,oneof"`
}

type SimpleNotification_Visited struct {
	Visited string `protobuf:"bytes,7,opt,name=visited,proto3,oneof"`
}

func (*SimpleNotification_Ichiba) isSimpleNotification_Message() {}

func (*SimpleNotification_Quote) isSimpleNotification_Message() {}

func (*SimpleNotification_Emotion) isSimpleNotification_Message() {}

func (*SimpleNotification_Cruise) isSimpleNotification_Message() {}

func (*SimpleNotification_ProgramExtended) isSimpleNotification_Message() {}

func (*SimpleNotification_RankingIn) isSimpleNotification_Message() {}

func (*SimpleNotification_RankingUpdated) isSimpleNotification_Message() {}

func (*SimpleNotification_Visited) isSimpleNotification_Message() {}

type Gift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId           string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	AdvertiserUserId *int64 `protobuf:"varint,2,opt,name=advertiser_user_id,json=advertiserUserId,proto3,oneof" json:"advertiser_user_id,omitempty"`
	AdvertiserName   string `protobuf:"bytes,3,opt,name=advertiser_name,json=advertiserName,proto3" json:"advertiser_name,omitempty"`
	Point            int64  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	Message          string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	ItemName         string `protobuf:"bytes,6,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	ContributionRank *int32 `protobuf:"varint,7,opt,name=contribution_rank,json=contributionRank,proto3,oneof" json:"contribution_rank,omitempty"`
}

func (x *Gift) Reset() {
	*x = Gift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gift) ProtoMessage() {}

func (x *Gift) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gift.ProtoReflect.Descriptor instead.
func (*Gift) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{5}
}

func (x *Gift) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *Gift) GetAdvertiserUserId() int64 {
	if x != nil && x.AdvertiserUserId != nil {
		return *x.AdvertiserUserId
	}
	return 0
}

func (x *Gift) GetAdvertiserName() string {
	if x != nil {
		return x.AdvertiserName
	}
	return ""
}

func (x *Gift) GetPoint() int64 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Gift) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Gift) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *Gift) GetContributionRank() int32 {
	if x != nil && x.ContributionRank != nil {
		return *x.ContributionRank
	}
	return 0
}

type Nicoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Versions:
	//
	//	*Nicoad_V0_
	//	*Nicoad_V1_
	Versions isNicoad_Versions `protobuf_oneof:"versions"`
}

func (x *Nicoad) Reset() {
	*x = Nicoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nicoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nicoad) ProtoMessage() {}

func (x *Nicoad) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nicoad.ProtoReflect.Descriptor instead.
func (*Nicoad) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{6}
}

func (m *Nicoad) GetVersions() isNicoad_Versions {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (x *Nicoad) GetV0() *Nicoad_V0 {
	if x, ok := x.GetVersions().(*Nicoad_V0_); ok {
		return x.V0
	}
	return nil
}

func (x *Nicoad) GetV1() *Nicoad_V1 {
	if x, ok := x.GetVersions().(*Nicoad_V1_); ok {
		return x.V1
	}
	return nil
}

type isNicoad_Versions interface {
	isNicoad_Versions()
}

type Nicoad_V0_ struct {
	V0 *Nicoad_V0 `protobuf:"bytes,1,opt,name=v0,proto3,oneof"`
}

type Nicoad_V1_ struct {
	V1 *Nicoad_V1 `protobuf:"bytes,2,opt,name=v1,proto3,oneof"`
}

func (*Nicoad_V0_) isNicoad_Versions() {}

func (*Nicoad_V1_) isNicoad_Versions() {}

type CommentLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CommentLock_Status `protobuf:"varint,1,opt,name=status,proto3,enum=dwango.nicolive.chat.data.CommentLock_Status" json:"status,omitempty"`
}

func (x *CommentLock) Reset() {
	*x = CommentLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentLock) ProtoMessage() {}

func (x *CommentLock) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentLock.ProtoReflect.Descriptor instead.
func (*CommentLock) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{7}
}

func (x *CommentLock) GetStatus() CommentLock_Status {
	if x != nil {
		return x.Status
	}
	return CommentLock_Unrestricted
}

type CommentMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout CommentMode_Layout `protobuf:"varint,1,opt,name=layout,proto3,enum=dwango.nicolive.chat.data.CommentMode_Layout" json:"layout,omitempty"`
}

func (x *CommentMode) Reset() {
	*x = CommentMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentMode) ProtoMessage() {}

func (x *CommentMode) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentMode.ProtoReflect.Descriptor instead.
func (*CommentMode) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{8}
}

func (x *CommentMode) GetLayout() CommentMode_Layout {
	if x != nil {
		return x.Layout
	}
	return CommentMode_Normal
}

type GameUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameUpdate) Reset() {
	*x = GameUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdate) ProtoMessage() {}

func (x *GameUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdate.ProtoReflect.Descriptor instead.
func (*GameUpdate) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{9}
}

type TrialPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Panel           TrialPanel_Panel `protobuf:"varint,1,opt,name=panel,proto3,enum=dwango.nicolive.chat.data.TrialPanel_Panel" json:"panel,omitempty"`
	UnqualifiedUser TrialPanel_Mode  `protobuf:"varint,2,opt,name=unqualified_user,json=unqualifiedUser,proto3,enum=dwango.nicolive.chat.data.TrialPanel_Mode" json:"unqualified_user,omitempty"`
}

func (x *TrialPanel) Reset() {
	*x = TrialPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialPanel) ProtoMessage() {}

func (x *TrialPanel) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialPanel.ProtoReflect.Descriptor instead.
func (*TrialPanel) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{10}
}

func (x *TrialPanel) GetPanel() TrialPanel_Panel {
	if x != nil {
		return x.Panel
	}
	return TrialPanel_Hidden
}

func (x *TrialPanel) GetUnqualifiedUser() TrialPanel_Mode {
	if x != nil {
		return x.UnqualifiedUser
	}
	return TrialPanel_Allowed
}

type ProgramStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State ProgramStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=dwango.nicolive.chat.data.ProgramStatus_State" json:"state,omitempty"`
}

func (x *ProgramStatus) Reset() {
	*x = ProgramStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramStatus) ProtoMessage() {}

func (x *ProgramStatus) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramStatus.ProtoReflect.Descriptor instead.
func (*ProgramStatus) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{11}
}

func (x *ProgramStatus) GetState() ProgramStatus_State {
	if x != nil {
		return x.State
	}
	return ProgramStatus_Unknown
}

type TagUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags        []*TagUpdated_Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	OwnerLocked bool              `protobuf:"varint,2,opt,name=owner_locked,json=ownerLocked,proto3" json:"owner_locked,omitempty"`
}

func (x *TagUpdated) Reset() {
	*x = TagUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagUpdated) ProtoMessage() {}

func (x *TagUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagUpdated.ProtoReflect.Descriptor instead.
func (*TagUpdated) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{12}
}

func (x *TagUpdated) GetTags() []*TagUpdated_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TagUpdated) GetOwnerLocked() bool {
	if x != nil {
		return x.OwnerLocked
	}
	return false
}

type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Viewers    *int64 `protobuf:"varint,1,opt,name=viewers,proto3,oneof" json:"viewers,omitempty"`
	Comments   *int64 `protobuf:"varint,2,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
	AdPoints   *int64 `protobuf:"varint,3,opt,name=ad_points,json=adPoints,proto3,oneof" json:"ad_points,omitempty"`
	GiftPoints *int64 `protobuf:"varint,4,opt,name=gift_points,json=giftPoints,proto3,oneof" json:"gift_points,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{13}
}

func (x *Statistics) GetViewers() int64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *Statistics) GetComments() int64 {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return 0
}

func (x *Statistics) GetAdPoints() int64 {
	if x != nil && x.AdPoints != nil {
		return *x.AdPoints
	}
	return 0
}

func (x *Statistics) GetGiftPoints() int64 {
	if x != nil && x.GiftPoints != nil {
		return *x.GiftPoints
	}
	return 0
}

type Marquee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Display *Marquee_Display `protobuf:"bytes,1,opt,name=display,proto3,oneof" json:"display,omitempty"`
}

func (x *Marquee) Reset() {
	*x = Marquee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marquee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marquee) ProtoMessage() {}

func (x *Marquee) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marquee.ProtoReflect.Descriptor instead.
func (*Marquee) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{14}
}

func (x *Marquee) GetDisplay() *Marquee_Display {
	if x != nil {
		return x.Display
	}
	return nil
}

type Enquete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question string            `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Choices  []*Enquete_Choice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	Status   Enquete_Status    `protobuf:"varint,3,opt,name=status,proto3,enum=dwango.nicolive.chat.data.Enquete_Status" json:"status,omitempty"`
}

func (x *Enquete) Reset() {
	*x = Enquete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enquete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enquete) ProtoMessage() {}

func (x *Enquete) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enquete.ProtoReflect.Descriptor instead.
func (*Enquete) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{15}
}

func (x *Enquete) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Enquete) GetChoices() []*Enquete_Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *Enquete) GetStatus() Enquete_Status {
	if x != nil {
		return x.Status
	}
	return Enquete_Closed
}

type MoveOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to To:
	//
	//	*MoveOrder_Jump
	//	*MoveOrder_Redirect
	To isMoveOrder_To `protobuf_oneof:"to"`
}

func (x *MoveOrder) Reset() {
	*x = MoveOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOrder) ProtoMessage() {}

func (x *MoveOrder) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOrder.ProtoReflect.Descriptor instead.
func (*MoveOrder) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{16}
}

func (m *MoveOrder) GetTo() isMoveOrder_To {
	if m != nil {
		return m.To
	}
	return nil
}

func (x *MoveOrder) GetJump() *Jump {
	if x, ok := x.GetTo().(*MoveOrder_Jump); ok {
		return x.Jump
	}
	return nil
}

func (x *MoveOrder) GetRedirect() *Redirect {
	if x, ok := x.GetTo().(*MoveOrder_Redirect); ok {
		return x.Redirect
	}
	return nil
}

type isMoveOrder_To interface {
	isMoveOrder_To()
}

type MoveOrder_Jump struct {
	Jump *Jump `protobuf:"bytes,1,opt,name=jump,proto3,oneof"`
}

type MoveOrder_Redirect struct {
	Redirect *Redirect `protobuf:"bytes,2,opt,name=redirect,proto3,oneof"`
}

func (*MoveOrder_Jump) isMoveOrder_To() {}

func (*MoveOrder_Redirect) isMoveOrder_To() {}

type Chat_Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position Chat_Modifier_Pos  `protobuf:"varint,1,opt,name=position,proto3,enum=dwango.nicolive.chat.data.Chat_Modifier_Pos" json:"position,omitempty"`
	Size     Chat_Modifier_Size `protobuf:"varint,2,opt,name=size,proto3,enum=dwango.nicolive.chat.data.Chat_Modifier_Size" json:"size,omitempty"`
	// Types that are assignable to Color:
	//
	//	*Chat_Modifier_NamedColor
	//	*Chat_Modifier_FullColor_
	Color   isChat_Modifier_Color `protobuf_oneof:"color"`
	Font    Chat_Modifier_Font    `protobuf:"varint,5,opt,name=font,proto3,enum=dwango.nicolive.chat.data.Chat_Modifier_Font" json:"font,omitempty"`
	Opacity Chat_Modifier_Opacity `protobuf:"varint,6,opt,name=opacity,proto3,enum=dwango.nicolive.chat.data.Chat_Modifier_Opacity" json:"opacity,omitempty"`
}

func (x *Chat_Modifier) Reset() {
	*x = Chat_Modifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chat_Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat_Modifier) ProtoMessage() {}

func (x *Chat_Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat_Modifier.ProtoReflect.Descriptor instead.
func (*Chat_Modifier) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Chat_Modifier) GetPosition() Chat_Modifier_Pos {
	if x != nil {
		return x.Position
	}
	return Chat_Modifier_naka
}

func (x *Chat_Modifier) GetSize() Chat_Modifier_Size {
	if x != nil {
		return x.Size
	}
	return Chat_Modifier_medium
}

func (m *Chat_Modifier) GetColor() isChat_Modifier_Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (x *Chat_Modifier) GetNamedColor() Chat_Modifier_ColorName {
	if x, ok := x.GetColor().(*Chat_Modifier_NamedColor); ok {
		return x.NamedColor
	}
	return Chat_Modifier_white
}

func (x *Chat_Modifier) GetFullColor() *Chat_Modifier_FullColor {
	if x, ok := x.GetColor().(*Chat_Modifier_FullColor_); ok {
		return x.FullColor
	}
	return nil
}

func (x *Chat_Modifier) GetFont() Chat_Modifier_Font {
	if x != nil {
		return x.Font
	}
	return Chat_Modifier_defont
}

func (x *Chat_Modifier) GetOpacity() Chat_Modifier_Opacity {
	if x != nil {
		return x.Opacity
	}
	return Chat_Modifier_Normal
}

type isChat_Modifier_Color interface {
	isChat_Modifier_Color()
}

type Chat_Modifier_NamedColor struct {
	NamedColor Chat_Modifier_ColorName `protobuf:"varint,3,opt,name=named_color,json=namedColor,proto3,enum=dwango.nicolive.chat.data.Chat_Modifier_ColorName,oneof"`
}

type Chat_Modifier_FullColor_ struct {
	FullColor *Chat_Modifier_FullColor `protobuf:"bytes,4,opt,name=full_color,json=fullColor,proto3,oneof"`
}

func (*Chat_Modifier_NamedColor) isChat_Modifier_Color() {}

func (*Chat_Modifier_FullColor_) isChat_Modifier_Color() {}

type Chat_Modifier_FullColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R int32 `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	G int32 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	B int32 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *Chat_Modifier_FullColor) Reset() {
	*x = Chat_Modifier_FullColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chat_Modifier_FullColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat_Modifier_FullColor) ProtoMessage() {}

func (x *Chat_Modifier_FullColor) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat_Modifier_FullColor.ProtoReflect.Descriptor instead.
func (*Chat_Modifier_FullColor) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Chat_Modifier_FullColor) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Chat_Modifier_FullColor) GetG() int32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Chat_Modifier_FullColor) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

type Nicoad_V0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latest     *Nicoad_V0_Latest    `protobuf:"bytes,1,opt,name=latest,proto3" json:"latest,omitempty"`
	Ranking    []*Nicoad_V0_Ranking `protobuf:"bytes,2,rep,name=ranking,proto3" json:"ranking,omitempty"`
	TotalPoint int32                `protobuf:"varint,3,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
}

func (x *Nicoad_V0) Reset() {
	*x = Nicoad_V0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nicoad_V0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nicoad_V0) ProtoMessage() {}

func (x *Nicoad_V0) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nicoad_V0.ProtoReflect.Descriptor instead.
func (*Nicoad_V0) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Nicoad_V0) GetLatest() *Nicoad_V0_Latest {
	if x != nil {
		return x.Latest
	}
	return nil
}

func (x *Nicoad_V0) GetRanking() []*Nicoad_V0_Ranking {
	if x != nil {
		return x.Ranking
	}
	return nil
}

func (x *Nicoad_V0) GetTotalPoint() int32 {
	if x != nil {
		return x.TotalPoint
	}
	return 0
}

type Nicoad_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAdPoint int32  `protobuf:"varint,1,opt,name=total_ad_point,json=totalAdPoint,proto3" json:"total_ad_point,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Nicoad_V1) Reset() {
	*x = Nicoad_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nicoad_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nicoad_V1) ProtoMessage() {}

func (x *Nicoad_V1) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nicoad_V1.ProtoReflect.Descriptor instead.
func (*Nicoad_V1) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Nicoad_V1) GetTotalAdPoint() int32 {
	if x != nil {
		return x.TotalAdPoint
	}
	return 0
}

func (x *Nicoad_V1) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Nicoad_V0_Latest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Advertiser string  `protobuf:"bytes,1,opt,name=advertiser,proto3" json:"advertiser,omitempty"`
	Point      int32   `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	Message    *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Nicoad_V0_Latest) Reset() {
	*x = Nicoad_V0_Latest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nicoad_V0_Latest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nicoad_V0_Latest) ProtoMessage() {}

func (x *Nicoad_V0_Latest) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nicoad_V0_Latest.ProtoReflect.Descriptor instead.
func (*Nicoad_V0_Latest) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *Nicoad_V0_Latest) GetAdvertiser() string {
	if x != nil {
		return x.Advertiser
	}
	return ""
}

func (x *Nicoad_V0_Latest) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Nicoad_V0_Latest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Nicoad_V0_Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Advertiser string  `protobuf:"bytes,1,opt,name=advertiser,proto3" json:"advertiser,omitempty"`
	Rank       int32   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Message    *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	UserRank   *int32  `protobuf:"varint,4,opt,name=user_rank,json=userRank,proto3,oneof" json:"user_rank,omitempty"`
}

func (x *Nicoad_V0_Ranking) Reset() {
	*x = Nicoad_V0_Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nicoad_V0_Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nicoad_V0_Ranking) ProtoMessage() {}

func (x *Nicoad_V0_Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nicoad_V0_Ranking.ProtoReflect.Descriptor instead.
func (*Nicoad_V0_Ranking) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *Nicoad_V0_Ranking) GetAdvertiser() string {
	if x != nil {
		return x.Advertiser
	}
	return ""
}

func (x *Nicoad_V0_Ranking) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Nicoad_V0_Ranking) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Nicoad_V0_Ranking) GetUserRank() int32 {
	if x != nil && x.UserRank != nil {
		return *x.UserRank
	}
	return 0
}

type TagUpdated_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Locked       bool   `protobuf:"varint,2,opt,name=locked,proto3" json:"locked,omitempty"`
	Reserved     bool   `protobuf:"varint,3,opt,name=reserved,proto3" json:"reserved,omitempty"`
	NicopediaUri string `protobuf:"bytes,4,opt,name=nicopedia_uri,json=nicopediaUri,proto3" json:"nicopedia_uri,omitempty"`
}

func (x *TagUpdated_Tag) Reset() {
	*x = TagUpdated_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagUpdated_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagUpdated_Tag) ProtoMessage() {}

func (x *TagUpdated_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagUpdated_Tag.ProtoReflect.Descriptor instead.
func (*TagUpdated_Tag) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{12, 0}
}

func (x *TagUpdated_Tag) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TagUpdated_Tag) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *TagUpdated_Tag) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *TagUpdated_Tag) GetNicopediaUri() string {
	if x != nil {
		return x.NicopediaUri
	}
	return ""
}

type Marquee_Display struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorComment *OperatorComment     `protobuf:"bytes,1,opt,name=operator_comment,json=operatorComment,proto3" json:"operator_comment,omitempty"`
	Duration        *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *Marquee_Display) Reset() {
	*x = Marquee_Display{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marquee_Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marquee_Display) ProtoMessage() {}

func (x *Marquee_Display) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marquee_Display.ProtoReflect.Descriptor instead.
func (*Marquee_Display) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Marquee_Display) GetOperatorComment() *OperatorComment {
	if x != nil {
		return x.OperatorComment
	}
	return nil
}

func (x *Marquee_Display) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type Enquete_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	PerMille    *int32 `protobuf:"varint,3,opt,name=per_mille,json=perMille,proto3,oneof" json:"per_mille,omitempty"`
}

func (x *Enquete_Choice) Reset() {
	*x = Enquete_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atoms_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enquete_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enquete_Choice) ProtoMessage() {}

func (x *Enquete_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_atoms_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enquete_Choice.ProtoReflect.Descriptor instead.
func (*Enquete_Choice) Descriptor() ([]byte, []int) {
	return file_atoms_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Enquete_Choice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Enquete_Choice) GetPerMille() int32 {
	if x != nil && x.PerMille != nil {
		return *x.PerMille
	}
	return 0
}

var File_atoms_proto protoreflect.FileDescriptor

var file_atoms_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x74, 0x6f, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64,
	0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x0a, 0x0a, 0x04, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x70, 0x6f, 0x73, 0x12,
	0x54, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f,
	0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x72, 0x61, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x6e, 0x6f, 0x1a, 0xa2, 0x07, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x73, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x77, 0x61, 0x6e,
	0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x55,
	0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x77, 0x61, 0x6e,
	0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x09, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x04, 0x66, 0x6f,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67,
	0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x12, 0x4a, 0x0a,
	0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x35, 0x0a, 0x09, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x62,
	0x22, 0x22, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x61, 0x6b, 0x61, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x74, 0x61, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x75, 0x65, 0x10, 0x02, 0x22, 0x26, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x69, 0x67, 0x10, 0x02, 0x22, 0xed, 0x01, 0x0a,
	0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x70, 0x69, 0x6e, 0x6b, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x63,
	0x79, 0x61, 0x6e, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x77, 0x68, 0x69, 0x74, 0x65, 0x32,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x64, 0x32, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05,
	0x70, 0x69, 0x6e, 0x6b, 0x32, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x32, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x32, 0x10,
	0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x32, 0x10, 0x0f, 0x12, 0x09, 0x0a,
	0x05, 0x63, 0x79, 0x61, 0x6e, 0x32, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x6c, 0x75, 0x65,
	0x32, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x32, 0x10, 0x12,
	0x12, 0x0a, 0x0a, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x32, 0x10, 0x13, 0x22, 0x2a, 0x0a, 0x04,
	0x46, 0x6f, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x6f, 0x6e, 0x74, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x63, 0x68, 0x6f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x67, 0x6f, 0x74, 0x68, 0x69, 0x63, 0x10, 0x02, 0x22, 0x26, 0x0a, 0x07, 0x4f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x77, 0x61,
	0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x69, 0x0a, 0x04, 0x4a, 0x75, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x22, 0x65, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x12,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x63, 0x68, 0x69, 0x62, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x63, 0x68, 0x69, 0x62, 0x61, 0x12, 0x16, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x06, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x04, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x12,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x22, 0x85, 0x05, 0x0a, 0x06, 0x4e, 0x69, 0x63, 0x6f, 0x61, 0x64, 0x12,
	0x36, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x77,
	0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x6f, 0x61, 0x64, 0x2e, 0x56,
	0x30, 0x48, 0x00, 0x52, 0x02, 0x76, 0x30, 0x12, 0x36, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4e, 0x69, 0x63, 0x6f, 0x61, 0x64, 0x2e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x1a,
	0xb8, 0x03, 0x0a, 0x02, 0x56, 0x30, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e,
	0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x6f, 0x61, 0x64, 0x2e, 0x56, 0x30, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64,
	0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x6f, 0x61, 0x64, 0x2e,
	0x56, 0x30, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x69, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x98, 0x01, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0x44, 0x0a, 0x02, 0x56, 0x31,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x77,
	0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x26, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x6e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x77, 0x61,
	0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x22, 0x32, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x02, 0x22, 0x0c, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x05,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x10, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x75, 0x6e, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x05,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x01, 0x22, 0x32,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x10, 0x02, 0x22, 0x76, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1f, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x54,
	0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f,
	0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x72, 0x0a, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x69,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x69, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x69, 0x22,
	0xd1, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x08, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x22, 0x8c, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x71, 0x75, 0x65, 0x65, 0x12,
	0x49, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x1a, 0xa9, 0x01, 0x0a, 0x07, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x22, 0xb5, 0x02, 0x0a, 0x07, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x77,
	0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x74, 0x65, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x5a, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x22, 0x2a,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x4d,
	0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6a, 0x75, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e,
	0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4a, 0x75, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x12,
	0x41, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x42, 0x04, 0x0a, 0x02, 0x74, 0x6f, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_atoms_proto_rawDescOnce sync.Once
	file_atoms_proto_rawDescData = file_atoms_proto_rawDesc
)

func file_atoms_proto_rawDescGZIP() []byte {
	file_atoms_proto_rawDescOnce.Do(func() {
		file_atoms_proto_rawDescData = protoimpl.X.CompressGZIP(file_atoms_proto_rawDescData)
	})
	return file_atoms_proto_rawDescData
}

var file_atoms_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_atoms_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_atoms_proto_goTypes = []any{
	(Chat_AccountStatus)(0),         // 0: dwango.nicolive.chat.data.Chat.AccountStatus
	(Chat_Modifier_Pos)(0),          // 1: dwango.nicolive.chat.data.Chat.Modifier.Pos
	(Chat_Modifier_Size)(0),         // 2: dwango.nicolive.chat.data.Chat.Modifier.Size
	(Chat_Modifier_ColorName)(0),    // 3: dwango.nicolive.chat.data.Chat.Modifier.ColorName
	(Chat_Modifier_Font)(0),         // 4: dwango.nicolive.chat.data.Chat.Modifier.Font
	(Chat_Modifier_Opacity)(0),      // 5: dwango.nicolive.chat.data.Chat.Modifier.Opacity
	(CommentLock_Status)(0),         // 6: dwango.nicolive.chat.data.CommentLock.Status
	(CommentMode_Layout)(0),         // 7: dwango.nicolive.chat.data.CommentMode.Layout
	(TrialPanel_Panel)(0),           // 8: dwango.nicolive.chat.data.TrialPanel.Panel
	(TrialPanel_Mode)(0),            // 9: dwango.nicolive.chat.data.TrialPanel.Mode
	(ProgramStatus_State)(0),        // 10: dwango.nicolive.chat.data.ProgramStatus.State
	(Enquete_Status)(0),             // 11: dwango.nicolive.chat.data.Enquete.Status
	(*Chat)(nil),                    // 12: dwango.nicolive.chat.data.Chat
	(*OperatorComment)(nil),         // 13: dwango.nicolive.chat.data.OperatorComment
	(*Jump)(nil),                    // 14: dwango.nicolive.chat.data.Jump
	(*Redirect)(nil),                // 15: dwango.nicolive.chat.data.Redirect
	(*SimpleNotification)(nil),      // 16: dwango.nicolive.chat.data.SimpleNotification
	(*Gift)(nil),                    // 17: dwango.nicolive.chat.data.Gift
	(*Nicoad)(nil),                  // 18: dwango.nicolive.chat.data.Nicoad
	(*CommentLock)(nil),             // 19: dwango.nicolive.chat.data.CommentLock
	(*CommentMode)(nil),             // 20: dwango.nicolive.chat.data.CommentMode
	(*GameUpdate)(nil),              // 21: dwango.nicolive.chat.data.GameUpdate
	(*TrialPanel)(nil),              // 22: dwango.nicolive.chat.data.TrialPanel
	(*ProgramStatus)(nil),           // 23: dwango.nicolive.chat.data.ProgramStatus
	(*TagUpdated)(nil),              // 24: dwango.nicolive.chat.data.TagUpdated
	(*Statistics)(nil),              // 25: dwango.nicolive.chat.data.Statistics
	(*Marquee)(nil),                 // 26: dwango.nicolive.chat.data.Marquee
	(*Enquete)(nil),                 // 27: dwango.nicolive.chat.data.Enquete
	(*MoveOrder)(nil),               // 28: dwango.nicolive.chat.data.MoveOrder
	(*Chat_Modifier)(nil),           // 29: dwango.nicolive.chat.data.Chat.Modifier
	(*Chat_Modifier_FullColor)(nil), // 30: dwango.nicolive.chat.data.Chat.Modifier.FullColor
	(*Nicoad_V0)(nil),               // 31: dwango.nicolive.chat.data.Nicoad.V0
	(*Nicoad_V1)(nil),               // 32: dwango.nicolive.chat.data.Nicoad.V1
	(*Nicoad_V0_Latest)(nil),        // 33: dwango.nicolive.chat.data.Nicoad.V0.Latest
	(*Nicoad_V0_Ranking)(nil),       // 34: dwango.nicolive.chat.data.Nicoad.V0.Ranking
	(*TagUpdated_Tag)(nil),          // 35: dwango.nicolive.chat.data.TagUpdated.Tag
	(*Marquee_Display)(nil),         // 36: dwango.nicolive.chat.data.Marquee.Display
	(*Enquete_Choice)(nil),          // 37: dwango.nicolive.chat.data.Enquete.Choice
	(*durationpb.Duration)(nil),     // 38: google.protobuf.Duration
}
var file_atoms_proto_depIdxs = []int32{
	0,  // 0: dwango.nicolive.chat.data.Chat.account_status:type_name -> dwango.nicolive.chat.data.Chat.AccountStatus
	29, // 1: dwango.nicolive.chat.data.Chat.modifier:type_name -> dwango.nicolive.chat.data.Chat.Modifier
	29, // 2: dwango.nicolive.chat.data.OperatorComment.modifier:type_name -> dwango.nicolive.chat.data.Chat.Modifier
	38, // 3: dwango.nicolive.chat.data.Jump.wait:type_name -> google.protobuf.Duration
	38, // 4: dwango.nicolive.chat.data.Redirect.wait:type_name -> google.protobuf.Duration
	31, // 5: dwango.nicolive.chat.data.Nicoad.v0:type_name -> dwango.nicolive.chat.data.Nicoad.V0
	32, // 6: dwango.nicolive.chat.data.Nicoad.v1:type_name -> dwango.nicolive.chat.data.Nicoad.V1
	6,  // 7: dwango.nicolive.chat.data.CommentLock.status:type_name -> dwango.nicolive.chat.data.CommentLock.Status
	7,  // 8: dwango.nicolive.chat.data.CommentMode.layout:type_name -> dwango.nicolive.chat.data.CommentMode.Layout
	8,  // 9: dwango.nicolive.chat.data.TrialPanel.panel:type_name -> dwango.nicolive.chat.data.TrialPanel.Panel
	9,  // 10: dwango.nicolive.chat.data.TrialPanel.unqualified_user:type_name -> dwango.nicolive.chat.data.TrialPanel.Mode
	10, // 11: dwango.nicolive.chat.data.ProgramStatus.state:type_name -> dwango.nicolive.chat.data.ProgramStatus.State
	35, // 12: dwango.nicolive.chat.data.TagUpdated.tags:type_name -> dwango.nicolive.chat.data.TagUpdated.Tag
	36, // 13: dwango.nicolive.chat.data.Marquee.display:type_name -> dwango.nicolive.chat.data.Marquee.Display
	37, // 14: dwango.nicolive.chat.data.Enquete.choices:type_name -> dwango.nicolive.chat.data.Enquete.Choice
	11, // 15: dwango.nicolive.chat.data.Enquete.status:type_name -> dwango.nicolive.chat.data.Enquete.Status
	14, // 16: dwango.nicolive.chat.data.MoveOrder.jump:type_name -> dwango.nicolive.chat.data.Jump
	15, // 17: dwango.nicolive.chat.data.MoveOrder.redirect:type_name -> dwango.nicolive.chat.data.Redirect
	1,  // 18: dwango.nicolive.chat.data.Chat.Modifier.position:type_name -> dwango.nicolive.chat.data.Chat.Modifier.Pos
	2,  // 19: dwango.nicolive.chat.data.Chat.Modifier.size:type_name -> dwango.nicolive.chat.data.Chat.Modifier.Size
	3,  // 20: dwango.nicolive.chat.data.Chat.Modifier.named_color:type_name -> dwango.nicolive.chat.data.Chat.Modifier.ColorName
	30, // 21: dwango.nicolive.chat.data.Chat.Modifier.full_color:type_name -> dwango.nicolive.chat.data.Chat.Modifier.FullColor
	4,  // 22: dwango.nicolive.chat.data.Chat.Modifier.font:type_name -> dwango.nicolive.chat.data.Chat.Modifier.Font
	5,  // 23: dwango.nicolive.chat.data.Chat.Modifier.opacity:type_name -> dwango.nicolive.chat.data.Chat.Modifier.Opacity
	33, // 24: dwango.nicolive.chat.data.Nicoad.V0.latest:type_name -> dwango.nicolive.chat.data.Nicoad.V0.Latest
	34, // 25: dwango.nicolive.chat.data.Nicoad.V0.ranking:type_name -> dwango.nicolive.chat.data.Nicoad.V0.Ranking
	13, // 26: dwango.nicolive.chat.data.Marquee.Display.operator_comment:type_name -> dwango.nicolive.chat.data.OperatorComment
	38, // 27: dwango.nicolive.chat.data.Marquee.Display.duration:type_name -> google.protobuf.Duration
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_atoms_proto_init() }
func file_atoms_proto_init() {
	if File_atoms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_atoms_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OperatorComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Jump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Redirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Gift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Nicoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CommentLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CommentMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GameUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TrialPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ProgramStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TagUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Marquee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Enquete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MoveOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Chat_Modifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Chat_Modifier_FullColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Nicoad_V0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Nicoad_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Nicoad_V0_Latest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Nicoad_V0_Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*TagUpdated_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Marquee_Display); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atoms_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Enquete_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_atoms_proto_msgTypes[0].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[1].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[4].OneofWrappers = []any{
		(*SimpleNotification_Ichiba)(nil),
		(*SimpleNotification_Quote)(nil),
		(*SimpleNotification_Emotion)(nil),
		(*SimpleNotification_Cruise)(nil),
		(*SimpleNotification_ProgramExtended)(nil),
		(*SimpleNotification_RankingIn)(nil),
		(*SimpleNotification_RankingUpdated)(nil),
		(*SimpleNotification_Visited)(nil),
	}
	file_atoms_proto_msgTypes[5].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[6].OneofWrappers = []any{
		(*Nicoad_V0_)(nil),
		(*Nicoad_V1_)(nil),
	}
	file_atoms_proto_msgTypes[13].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[14].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[16].OneofWrappers = []any{
		(*MoveOrder_Jump)(nil),
		(*MoveOrder_Redirect)(nil),
	}
	file_atoms_proto_msgTypes[17].OneofWrappers = []any{
		(*Chat_Modifier_NamedColor)(nil),
		(*Chat_Modifier_FullColor_)(nil),
	}
	file_atoms_proto_msgTypes[21].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[22].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[24].OneofWrappers = []any{}
	file_atoms_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_atoms_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_atoms_proto_goTypes,
		DependencyIndexes: file_atoms_proto_depIdxs,
		EnumInfos:         file_atoms_proto_enumTypes,
		MessageInfos:      file_atoms_proto_msgTypes,
	}.Build()
	File_atoms_proto = out.File
	file_atoms_proto_rawDesc = nil
	file_atoms_proto_goTypes = nil
	file_atoms_proto_depIdxs = nil
}
