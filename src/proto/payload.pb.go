// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: payload.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkedMessage_Signal int32

const (
	ChunkedMessage_Flushed ChunkedMessage_Signal = 0
)

// Enum value maps for ChunkedMessage_Signal.
var (
	ChunkedMessage_Signal_name = map[int32]string{
		0: "Flushed",
	}
	ChunkedMessage_Signal_value = map[string]int32{
		"Flushed": 0,
	}
)

func (x ChunkedMessage_Signal) Enum() *ChunkedMessage_Signal {
	p := new(ChunkedMessage_Signal)
	*p = x
	return p
}

func (x ChunkedMessage_Signal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkedMessage_Signal) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[0].Descriptor()
}

func (ChunkedMessage_Signal) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[0]
}

func (x ChunkedMessage_Signal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkedMessage_Signal.Descriptor instead.
func (ChunkedMessage_Signal) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{0, 0}
}

type ChunkedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *ChunkedMessage_Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ChunkedMessage_Message
	//	*ChunkedMessage_State
	//	*ChunkedMessage_Signal_
	Payload isChunkedMessage_Payload `protobuf_oneof:"payload"`
}

func (x *ChunkedMessage) Reset() {
	*x = ChunkedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedMessage) ProtoMessage() {}

func (x *ChunkedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedMessage.ProtoReflect.Descriptor instead.
func (*ChunkedMessage) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkedMessage) GetMeta() *ChunkedMessage_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *ChunkedMessage) GetPayload() isChunkedMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ChunkedMessage) GetMessage() *NicoliveMessage {
	if x, ok := x.GetPayload().(*ChunkedMessage_Message); ok {
		return x.Message
	}
	return nil
}

func (x *ChunkedMessage) GetState() *NicoliveState {
	if x, ok := x.GetPayload().(*ChunkedMessage_State); ok {
		return x.State
	}
	return nil
}

func (x *ChunkedMessage) GetSignal() ChunkedMessage_Signal {
	if x, ok := x.GetPayload().(*ChunkedMessage_Signal_); ok {
		return x.Signal
	}
	return ChunkedMessage_Flushed
}

type isChunkedMessage_Payload interface {
	isChunkedMessage_Payload()
}

type ChunkedMessage_Message struct {
	Message *NicoliveMessage `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type ChunkedMessage_State struct {
	State *NicoliveState `protobuf:"bytes,4,opt,name=state,proto3,oneof"`
}

type ChunkedMessage_Signal_ struct {
	Signal ChunkedMessage_Signal `protobuf:"varint,5,opt,name=signal,proto3,enum=dwango.nicolive.chat.service.edge.ChunkedMessage_Signal,oneof"`
}

func (*ChunkedMessage_Message) isChunkedMessage_Payload() {}

func (*ChunkedMessage_State) isChunkedMessage_Payload() {}

func (*ChunkedMessage_Signal_) isChunkedMessage_Payload() {}

type PackedSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChunkedMessage            `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Next     *PackedSegment_Next          `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	Snapshot *PackedSegment_StateSnapshot `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *PackedSegment) Reset() {
	*x = PackedSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackedSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedSegment) ProtoMessage() {}

func (x *PackedSegment) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedSegment.ProtoReflect.Descriptor instead.
func (*PackedSegment) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{1}
}

func (x *PackedSegment) GetMessages() []*ChunkedMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *PackedSegment) GetNext() *PackedSegment_Next {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *PackedSegment) GetSnapshot() *PackedSegment_StateSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ChunkedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*ChunkedEntry_Backward
	//	*ChunkedEntry_Previous
	//	*ChunkedEntry_Segment
	//	*ChunkedEntry_Next
	Entry isChunkedEntry_Entry `protobuf_oneof:"entry"`
}

func (x *ChunkedEntry) Reset() {
	*x = ChunkedEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedEntry) ProtoMessage() {}

func (x *ChunkedEntry) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedEntry.ProtoReflect.Descriptor instead.
func (*ChunkedEntry) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{2}
}

func (m *ChunkedEntry) GetEntry() isChunkedEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *ChunkedEntry) GetBackward() *BackwardSegment {
	if x, ok := x.GetEntry().(*ChunkedEntry_Backward); ok {
		return x.Backward
	}
	return nil
}

func (x *ChunkedEntry) GetPrevious() *MessageSegment {
	if x, ok := x.GetEntry().(*ChunkedEntry_Previous); ok {
		return x.Previous
	}
	return nil
}

func (x *ChunkedEntry) GetSegment() *MessageSegment {
	if x, ok := x.GetEntry().(*ChunkedEntry_Segment); ok {
		return x.Segment
	}
	return nil
}

func (x *ChunkedEntry) GetNext() *ChunkedEntry_ReadyForNext {
	if x, ok := x.GetEntry().(*ChunkedEntry_Next); ok {
		return x.Next
	}
	return nil
}

type isChunkedEntry_Entry interface {
	isChunkedEntry_Entry()
}

type ChunkedEntry_Backward struct {
	Backward *BackwardSegment `protobuf:"bytes,2,opt,name=backward,proto3,oneof"`
}

type ChunkedEntry_Previous struct {
	Previous *MessageSegment `protobuf:"bytes,3,opt,name=previous,proto3,oneof"`
}

type ChunkedEntry_Segment struct {
	Segment *MessageSegment `protobuf:"bytes,1,opt,name=segment,proto3,oneof"`
}

type ChunkedEntry_Next struct {
	Next *ChunkedEntry_ReadyForNext `protobuf:"bytes,4,opt,name=next,proto3,oneof"`
}

func (*ChunkedEntry_Backward) isChunkedEntry_Entry() {}

func (*ChunkedEntry_Previous) isChunkedEntry_Entry() {}

func (*ChunkedEntry_Segment) isChunkedEntry_Entry() {}

func (*ChunkedEntry_Next) isChunkedEntry_Entry() {}

type MessageSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Until *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	Uri   string                 `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *MessageSegment) Reset() {
	*x = MessageSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSegment) ProtoMessage() {}

func (x *MessageSegment) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSegment.ProtoReflect.Descriptor instead.
func (*MessageSegment) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{3}
}

func (x *MessageSegment) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *MessageSegment) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *MessageSegment) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type BackwardSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Until    *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=until,proto3" json:"until,omitempty"`
	Segment  *PackedSegment_Next          `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
	Snapshot *PackedSegment_StateSnapshot `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *BackwardSegment) Reset() {
	*x = BackwardSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackwardSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackwardSegment) ProtoMessage() {}

func (x *BackwardSegment) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackwardSegment.ProtoReflect.Descriptor instead.
func (*BackwardSegment) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{4}
}

func (x *BackwardSegment) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *BackwardSegment) GetSegment() *PackedSegment_Next {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *BackwardSegment) GetSnapshot() *PackedSegment_StateSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ChunkedMessage_Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	At     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at,proto3" json:"at,omitempty"`
	Origin *NicoliveOrigin        `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *ChunkedMessage_Meta) Reset() {
	*x = ChunkedMessage_Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedMessage_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedMessage_Meta) ProtoMessage() {}

func (x *ChunkedMessage_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedMessage_Meta.ProtoReflect.Descriptor instead.
func (*ChunkedMessage_Meta) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ChunkedMessage_Meta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChunkedMessage_Meta) GetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *ChunkedMessage_Meta) GetOrigin() *NicoliveOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type PackedSegment_Next struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *PackedSegment_Next) Reset() {
	*x = PackedSegment_Next{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackedSegment_Next) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedSegment_Next) ProtoMessage() {}

func (x *PackedSegment_Next) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedSegment_Next.ProtoReflect.Descriptor instead.
func (*PackedSegment_Next) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PackedSegment_Next) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type PackedSegment_StateSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *PackedSegment_StateSnapshot) Reset() {
	*x = PackedSegment_StateSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackedSegment_StateSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedSegment_StateSnapshot) ProtoMessage() {}

func (x *PackedSegment_StateSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedSegment_StateSnapshot.ProtoReflect.Descriptor instead.
func (*PackedSegment_StateSnapshot) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{1, 1}
}

func (x *PackedSegment_StateSnapshot) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type ChunkedEntry_ReadyForNext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	At int64 `protobuf:"varint,1,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *ChunkedEntry_ReadyForNext) Reset() {
	*x = ChunkedEntry_ReadyForNext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedEntry_ReadyForNext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedEntry_ReadyForNext) ProtoMessage() {}

func (x *ChunkedEntry_ReadyForNext) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedEntry_ReadyForNext.ProtoReflect.Descriptor instead.
func (*ChunkedEntry_ReadyForNext) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ChunkedEntry_ReadyForNext) GetAt() int64 {
	if x != nil {
		return x.At
	}
	return 0
}

var File_payload_proto protoreflect.FileDescriptor

var file_payload_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x03,
	0x0a, 0x0e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e,
	0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x85, 0x01, 0x0a, 0x04, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x61, 0x74, 0x12,
	0x41, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x69, 0x63, 0x6f,
	0x6c, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x22, 0x15, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x10, 0x00, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67,
	0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x12, 0x5a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x18, 0x0a, 0x04,
	0x4e, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x1a, 0x21, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0xfd, 0x02, 0x0a, 0x0c, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64,
	0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x4d, 0x0a,
	0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x77, 0x61,
	0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x1a, 0x1e, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x61, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x05,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x22, 0xf0, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f,
	0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x77, 0x61, 0x6e,
	0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payload_proto_rawDescOnce sync.Once
	file_payload_proto_rawDescData = file_payload_proto_rawDesc
)

func file_payload_proto_rawDescGZIP() []byte {
	file_payload_proto_rawDescOnce.Do(func() {
		file_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_payload_proto_rawDescData)
	})
	return file_payload_proto_rawDescData
}

var file_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_payload_proto_goTypes = []any{
	(ChunkedMessage_Signal)(0),          // 0: dwango.nicolive.chat.service.edge.ChunkedMessage.Signal
	(*ChunkedMessage)(nil),              // 1: dwango.nicolive.chat.service.edge.ChunkedMessage
	(*PackedSegment)(nil),               // 2: dwango.nicolive.chat.service.edge.PackedSegment
	(*ChunkedEntry)(nil),                // 3: dwango.nicolive.chat.service.edge.ChunkedEntry
	(*MessageSegment)(nil),              // 4: dwango.nicolive.chat.service.edge.MessageSegment
	(*BackwardSegment)(nil),             // 5: dwango.nicolive.chat.service.edge.BackwardSegment
	(*ChunkedMessage_Meta)(nil),         // 6: dwango.nicolive.chat.service.edge.ChunkedMessage.Meta
	(*PackedSegment_Next)(nil),          // 7: dwango.nicolive.chat.service.edge.PackedSegment.Next
	(*PackedSegment_StateSnapshot)(nil), // 8: dwango.nicolive.chat.service.edge.PackedSegment.StateSnapshot
	(*ChunkedEntry_ReadyForNext)(nil),   // 9: dwango.nicolive.chat.service.edge.ChunkedEntry.ReadyForNext
	(*NicoliveMessage)(nil),             // 10: dwango.nicolive.chat.data.NicoliveMessage
	(*NicoliveState)(nil),               // 11: dwango.nicolive.chat.data.NicoliveState
	(*timestamppb.Timestamp)(nil),       // 12: google.protobuf.Timestamp
	(*NicoliveOrigin)(nil),              // 13: dwango.nicolive.chat.data.NicoliveOrigin
}
var file_payload_proto_depIdxs = []int32{
	6,  // 0: dwango.nicolive.chat.service.edge.ChunkedMessage.meta:type_name -> dwango.nicolive.chat.service.edge.ChunkedMessage.Meta
	10, // 1: dwango.nicolive.chat.service.edge.ChunkedMessage.message:type_name -> dwango.nicolive.chat.data.NicoliveMessage
	11, // 2: dwango.nicolive.chat.service.edge.ChunkedMessage.state:type_name -> dwango.nicolive.chat.data.NicoliveState
	0,  // 3: dwango.nicolive.chat.service.edge.ChunkedMessage.signal:type_name -> dwango.nicolive.chat.service.edge.ChunkedMessage.Signal
	1,  // 4: dwango.nicolive.chat.service.edge.PackedSegment.messages:type_name -> dwango.nicolive.chat.service.edge.ChunkedMessage
	7,  // 5: dwango.nicolive.chat.service.edge.PackedSegment.next:type_name -> dwango.nicolive.chat.service.edge.PackedSegment.Next
	8,  // 6: dwango.nicolive.chat.service.edge.PackedSegment.snapshot:type_name -> dwango.nicolive.chat.service.edge.PackedSegment.StateSnapshot
	5,  // 7: dwango.nicolive.chat.service.edge.ChunkedEntry.backward:type_name -> dwango.nicolive.chat.service.edge.BackwardSegment
	4,  // 8: dwango.nicolive.chat.service.edge.ChunkedEntry.previous:type_name -> dwango.nicolive.chat.service.edge.MessageSegment
	4,  // 9: dwango.nicolive.chat.service.edge.ChunkedEntry.segment:type_name -> dwango.nicolive.chat.service.edge.MessageSegment
	9,  // 10: dwango.nicolive.chat.service.edge.ChunkedEntry.next:type_name -> dwango.nicolive.chat.service.edge.ChunkedEntry.ReadyForNext
	12, // 11: dwango.nicolive.chat.service.edge.MessageSegment.from:type_name -> google.protobuf.Timestamp
	12, // 12: dwango.nicolive.chat.service.edge.MessageSegment.until:type_name -> google.protobuf.Timestamp
	12, // 13: dwango.nicolive.chat.service.edge.BackwardSegment.until:type_name -> google.protobuf.Timestamp
	7,  // 14: dwango.nicolive.chat.service.edge.BackwardSegment.segment:type_name -> dwango.nicolive.chat.service.edge.PackedSegment.Next
	8,  // 15: dwango.nicolive.chat.service.edge.BackwardSegment.snapshot:type_name -> dwango.nicolive.chat.service.edge.PackedSegment.StateSnapshot
	12, // 16: dwango.nicolive.chat.service.edge.ChunkedMessage.Meta.at:type_name -> google.protobuf.Timestamp
	13, // 17: dwango.nicolive.chat.service.edge.ChunkedMessage.Meta.origin:type_name -> dwango.nicolive.chat.data.NicoliveOrigin
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_payload_proto_init() }
func file_payload_proto_init() {
	if File_payload_proto != nil {
		return
	}
	file_message_proto_init()
	file_state_proto_init()
	file_origin_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payload_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PackedSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkedEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MessageSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BackwardSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkedMessage_Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PackedSegment_Next); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PackedSegment_StateSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkedEntry_ReadyForNext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_payload_proto_msgTypes[0].OneofWrappers = []any{
		(*ChunkedMessage_Message)(nil),
		(*ChunkedMessage_State)(nil),
		(*ChunkedMessage_Signal_)(nil),
	}
	file_payload_proto_msgTypes[2].OneofWrappers = []any{
		(*ChunkedEntry_Backward)(nil),
		(*ChunkedEntry_Previous)(nil),
		(*ChunkedEntry_Segment)(nil),
		(*ChunkedEntry_Next)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payload_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payload_proto_goTypes,
		DependencyIndexes: file_payload_proto_depIdxs,
		EnumInfos:         file_payload_proto_enumTypes,
		MessageInfos:      file_payload_proto_msgTypes,
	}.Build()
	File_payload_proto = out.File
	file_payload_proto_rawDesc = nil
	file_payload_proto_goTypes = nil
	file_payload_proto_depIdxs = nil
}
